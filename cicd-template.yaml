apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    iconClass: icon-jenkins
    tags: instant-app,jenkins,cicd
  name: cicd
message: "Use the following credentials for login:\nJenkins: use your OpenShift credentials"
parameters:
- displayName: DEV project name
  value: dev
  name: DEV_PROJECT
  required: true
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_admin
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    name: default
# Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: tasks-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: ${WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: DEV_PROJECT
          value: ${DEV_PROJECT}
        
      
        jenkinsfile: |-
          // path of the template to use
          def templatePath = 'https://raw.githubusercontent.com/gskumar1010/nodejs-stateless/master/openshift/templates/nodejs.json'
          // name of the template that will be created
          def templateName = 'nodejs-example'
          // NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
          // and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
          // will not be fully engaged.
          pipeline {
              agent {
                node {
                  // spin up a node.js slave pod to run this build on
                  label 'master'
                }
              }
              options {
                  // set a timeout of 20 minutes for this pipeline
                  timeout(time: 20, unit: 'MINUTES')
              }
              stages {
                  stage('preamble') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject(env.DEV_PROJECT) {
                                    echo "Using project: ${openshift.project()}"
                                }
                            }
                        }
                    }
                }
                stage('cleanup') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject(env.DEV_PROJECT) {
                                    // delete everything with this template label
                                    openshift.selector("all", [ template : templateName ]).delete()
                                    // delete any secrets with this template label
                                    if (openshift.selector("secrets", templateName).exists()) {
                                        openshift.selector("secrets", templateName).delete()
                                    }
                                }
                            }
                        } // script
                    } // steps
                } // stage
                stage('create') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject(env.DEV_PROJECT) {
                                    // create a new application from the templatePath
                                    openshift.newApp(templatePath)
                                }
                            }
                        } // script
                    } // steps
                } // stage
                stage('build') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject(env.DEV_PROJECT) {
                                    def builds = openshift.selector("bc", templateName).related('builds')
                                    builds.untilEach(1) {
                                        return (it.object().status.phase == "Complete")
                                    }
                                }
                            }
                        } // script
                    } // steps
                } // stage
                stage('deploy') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject(env.DEV_PROJECT) {
                                    def rm = openshift.selector("dc", templateName).rollout()
                                    openshift.selector("dc", templateName).related('pods').untilEach(1) {
                                        return (it.object().status.phase == "Running")
                                    }
                                }
                            }
                        } // script
                    } // steps
                } // stage
                
                
               
                
                

              } // stages
          } // pipeline
        
         
         
      type: JenkinsPipeline
